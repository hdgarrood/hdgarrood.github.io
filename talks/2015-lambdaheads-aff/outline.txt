
Outline
* (Haskell) referential transparency, IO actions
* PureScript intro
* Eff (synchronous) actions in PureScript
* Making an asynchronous version
* Neat Aff stuff
  * fork
  * parallel
  * semigroup, monoid
  * plus, monadplus
  * monaderror?

===========

Section 1: IO as actions

* Side effects
  * definition
  * want outputs to only depend on inputs
  * explanation of examples

* IO without side effects
  * Data type for repr.
    * Parameter = eventual result
  * Do notation
    * Makes it easy to put actions together
    * Not the only way

05:00
---

Section 2: short intro to PureScript

* purescript
  * Like Haskell
  * Compiles to JS
  * Much better aligned with JS semantics
      * Strict
      * Primitive types match JS's
        * Boolean, Number, String, Array, Object, Function
      * => PureScript has no RTS

* Eff =~ IO
  * Ignore the first type param
  * Representation of Eff: JS function.

8:00
---

Section 3: Async IO in PureScript

* Limitations of Eff
  * Eff is synchronous; blocks main thread
    * Like JS
    * Will freeze the tab
  * Callbacks, like JS, are an answer

* Limitations of callbacks
    * For the same reasons as JS, quickly becomes painful
    * Deeply nested syntax trees
    * Subtle bug here:
      * throwing asynchronously
    * Error handling
      * could copy Node but we can do better

* What do we *want* to write?
  * Synchronous-style program
  * Actually executes asynchronously
  * Possible to catch exceptions, just like in synchronous code
    * Should be able to deal with errors only when we choose to
  -- *drumroll*
  * This is exactly what the purescript library Aff is

Section 3a: Examples

* Handling errors

* Fork?

* Kick off a bunch of things together, and continue only when all are done

* Timeout?


===
slide 2

What problem?
- There is a lot of reusable PureScript code available as libraries
- We want to make it accessible and discoverable.
Questions like:
- How do I use this library?
- What can I do with a value of type X? What does it represent?
- What does the function Y do?
- Does any function with the type Z exist?
- Has anyone written code to help deal with, eg, nonempty arrays?

First started wondering while writing multiplayer pacman
- Documentation was hard to find
- Often Google was your best bet
  - only for package names, not function / module / type
- Easy to reimplement/not use things that already exist
  - eg: mconcat, intercalate, foldr, non-empty arrays

===

Pursuit now
- Yesod
- Heretical to have no PureScript?

===

HTML documentation
- (show in browser)
- package overview pages
- Links to dependencies is great
  - mention bug re transitive dependencies
- Titles for fully-qualified names
- Source links on GitHub
- Markdown via Cheapskate. Doesn't seem to be a problem (yet) that we use two
  different renderers.
- Only shows published versions, no risk of accidentally looking at master
  docs

- Package authors upload

===

Github integration
- (show 'published by')
- accounts as identities (so that we know who uploaded stuff)
- OAuth
- Displaying READMEs
- source links
- backup

- Pros
  - easy deployment
  - no sensitive data on the server
  - easy implementation
- Cons
  - if Github goes down, no uploading because impossible to authenticate

===

Hoogle
- (show: "s (t a) -> t (s a)")
- Good searching by name and type :)
- How does it work?
  - Store an intermediate form of data, similar to an AST, containing
    modules -> declarations, with type (both senses), title, docs, etc.
  - Go over all the packages, turning this into a Hoogle input file
    - To do this, we have to pretend it's Haskell:
      - fiddle with rows, turn them into weird haskell-ish types
      - flip arrows around in type class declarations
  - Give that to Hoogle, create a database
  - This all takes around 5 seconds for the whole database at the moment
  - Stick it in a TVar, regenerate hourly
  - Finally, take queries from the web UI and pass them to Hoogle
- Although a couple of problems with type search
  - 500 errors because I wasn't interpreting Hoogle output correctly
  - Thinks two identically named data constructors in different modules are
    the same
  - No results for the following:
    - Char -> String
    - Map k v -> List (Tuple k v)
- Rows are hideous
  - (show)

===

Filesystem database
- JSON files, in the same structure
- Potentially going to bite us later on
  - "Three options, Postgres, SQLite, intense pain"
- But it seems ok so far
- Backup is super easy: just git commit and push to GitHub.
- The only configuration necessary is to specify a directory to use
- Also: very easy to duplicate production DB for development

===

In the future

- Automated uploading
- Better Hoogle integration
  - first class PureScript support

Todo?
- What integrating with Hoogle is like?
- What using Yesod is like?
- Differences to Hackage?
- Strong integration with GitHub: advantages, disadvantages.
